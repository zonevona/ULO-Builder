#
# Copyright (C) 2024 nosignals
#
name: ULO online

on:
  workflow_dispatch:
    inputs:
      kernel:
        description: 'Kernel Version (ex. 6.6.6, 6.1.31-localversion)'
        required: true
        default: '6.1.66-DBAI'
        type: string
      devices:
        description: "Devices"
        required: true
        default: "s905x"
        type: choice
        options:
          - s905x
          - s905x2
          - s905x3
          - s905x4
          - h5-orangepi-zeroplus2
          - h5-orangepi-zeroplus
          - h5-orangepi-prime
          - h5-orangepi-pc2
          - h6-orangepi-lite2
          - h6-orangepi-1plus
          - h6-orangepi-3
          - h6-orangepi-3lts
          - h616-orangepi-zero2
          - h618-orangepi-zero2w
          - h618-orangepi-zero3
          - rk3566-orangepi-3b
          - rk3588-orangepi-5plus
          - rk3588s-orangepi-5
      rootfs_size:
        description: "ROOTFS Size, min 640 (756, 1024, 2048, etc)"
        required: true
        default: '1024'
        type: string
      versi:
        description: "Pilih ULO / ULO2"
        required: true
        default: "ulo2"     
        type: choice
        options:
          - ulo
          - ulo2
      fwinfo:
        description: 'Firmware Information'
        required: true
        default: '-'
        type: string
      type_file:
        description: "Select type file"
        required: false
        default: "img.gz"
        type: choice
        options:
          - img.xz
          - img.gz
      img_url:
        description: "Set the URL img file"
        required: true
        type: string
      rename_rootfs:
        description: "Ganti nama rootfs"
        required: false
        default: ""     
        type: string 

env:
  TZ: Asia/Jakarta    

jobs: 
  build_ipk:
    permissions:
      contents: write
    name: ULO online
    runs-on: ubuntu-22.04
    steps:
      
      - name: Cleanup and Installing Prerequisites
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get update
          sudo -E apt-get -y install lolcat build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git \
            libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget p7zip-full
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo -E apt-get -y install python3-pip
          pip3 install --upgrade gdown
          pip3 install git+https://github.com/Juvenal-Yescas/mediafire-dl
          wget https://mega.nz/linux/repo/xUbuntu_22.04/amd64/megacmd-xUbuntu_22.04_amd64.deb && sudo apt install "$PWD/megacmd-xUbuntu_22.04_amd64.deb"
          sudo timedatectl set-timezone "$TZ"

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}

      - name: Mengatur tanggal
        id: date
        run: echo "date=$(date +'%d-%m-%y %H:%M:%S')" >> $GITHUB_ENV
   
          
      - name: Download file ${{ inputs.type_file }}
        run: |
          mkdir -p build
          cd build

          if [[ "${{ inputs.img_url }}" == *"drive.google.com"* ]]; then
            file_id=$(echo ${{ inputs.img_url }} | awk -F'/' '{print $6}')
            gdown --id ${file_id} -O file.${{ inputs.type_file }}

          elif [[ "${{ inputs.img_url }}" == *"mediafire.com"* ]]; then
            mediafire-dl ${{ inputs.img_url }} -o file.${{ inputs.type_file }}

          elif [[ "${{ inputs.img_url }}" == *"mega.nz"* ]]; then
            mega-get ${{ inputs.img_url }}
            file_mega=$(ls | grep -E '\.img(\.gz|\.xz)?$')
            mv ${file_mega} file.${{ inputs.type_file }}

          elif [[ "${{ inputs.img_url }}" == *"github.com"* && "${{ inputs.img_url }}" == *"/releases/download/"* ]]; then
            wget --header="Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 --no-check-certificate \
                 -O file.${{ inputs.type_file }} \
                 ${{ inputs.img_url }}

          else
            wget --no-check-certificate ${{ inputs.img_url }} -O file.${{ inputs.type_file }}
          fi

      - name: Extract firmware
        run: |
          cd build
          sudo mkdir -p boot rootfs img
          
          echo "üì¶ Mengekstrak file image..."
          if [[ "${{ inputs.type_file }}" == "img.gz" ]]; then
            sudo gunzip file.img.gz
          else
            sudo unxz file.img.xz
          fi
          
          echo "üîÑ Meng-attach file.img ke loop device..."
          los=$(sudo losetup -fP --show file.img)
          echo "‚úÖ Loop device: $los"
          echo "üßæ Daftar partisi:"
          ls -l ${los}*

          # Coba mount partisi p2, jika tidak ada coba p1, jika tidak ada coba langsung
          if [ -e ${los}p2 ]; then
            echo "üìÅ Mounting partisi kedua (${los}p2)..."
            sudo mount ${los}p2 rootfs
          elif [ -e ${los}p1 ]; then
            echo "üìÅ Partisi kedua tidak ditemukan. Mounting partisi pertama (${los}p1)..."
            sudo mount ${los}p1 rootfs
          else
            echo "‚ö†Ô∏è Tidak ditemukan partisi p1/p2. Coba mounting langsung ke ${los} (raw image)..."
            sudo mount ${los} rootfs
          fi

          echo "üì¶ Membuat arsip rootfs..."
          (cd rootfs && sudo tar cfz /home/runner/work/ULO-Builder/ULO-Builder/rootfs/${{ inputs.rename_rootfs }}.tar.gz .)

          echo "‚úÖ Extract selesai"

      - name: Building OpenWrt
        run: |
          sudo chmod +x ulo2
          sudo chmod +x ulo
          sudo ./${{ inputs.versi }} -m ${{ inputs.devices }} -k ${{ inputs.kernel }} -s ${{ inputs.rootfs_size }}

      - name: Creating Package Artifact
        run: |
          mkdir -p ./artifact
          cp -rf ./out/${{ inputs.devices }}/* ./artifact/
          cp -rf ./rootfs/*.tar.gz ./artifact/
          
      - name: Delivering Package
        uses: actions/upload-artifact@v4
        with:
          name: openwrt_package
          path: ./artifact/*

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifact/*
          tag: ${{ inputs.devices }}
          file_glob: true
          overwrite: true
          body: |
            ## OpenWRT Release for ${{ inputs.devices }} devices
            ULO-Builder Release from Github Workflow
            ### OpenWrt Image Information
            - Firmware Details:
              - Tanggal Build: ${{ env.date }}
              - Devices type: ${{ inputs.devices }}
              - Kernel version: ${{ inputs.kernel }}
              - ROOTFS File: ${{ inputs.rename_rootfs }}
              - ROOTFS Size: ${{ inputs.rootfs_size }}
            - Firmware Information: 
              - ${{ inputs.fwinfo }}
