#
# Copyright (C) 2024 nosignals
#
name: ULO Autobuilder test

on:
  workflow_dispatch:
    inputs:
      kernel:
        description: 'Kernel Version (ex. 6.6.6, 6.1.31-localversion)'
        required: true
        default: '6.1.66-DBAI'
        type: string
      devices:
        description: "Devices"
        required: true
        default: "s905x"
        type: choice
        options:
          - s905x
          - s905x2
          - s905x3
          - s905x4
          - h5-orangepi-zeroplus2
          - h5-orangepi-zeroplus
          - h5-orangepi-prime
          - h5-orangepi-pc2
          - h6-orangepi-lite2
          - h6-orangepi-1plus
          - h6-orangepi-3
          - h6-orangepi-3lts
          - h616-orangepi-zero2
          - h618-orangepi-zero2w
          - h618-orangepi-zero3
          - rk3566-orangepi-3b
          - rk3588-orangepi-5plus
          - rk3588s-orangepi-5
      rootfs_url:
        description: "Upload ROOTFS via link (GitHub, MEGA, Mediafire, GDrive)"
        required: false
        default: ""
      rootfs:
        description: 'ROOTFS File (ex. ImmortalWrt-21-02-7-rootfs.tar.gz)'
        required: true
        default: 'ImmortalWrt-21-02-7-rootfs.tar.gz'
        type: string
      rootfs_size:
        description: "ROOTFS Size, min 640 (756, 1024, 2048, etc)"
        required: true
        default: '1024'
        type: string
      fwinfo:
        description: 'Firmware Information'
        required: true
        default: 'your custom information at release pages'
        type: string
jobs: 
  build_ipk:
    permissions:
      contents: write
    name: ULO Autobuilder
    runs-on: ubuntu-22.04
    steps:
      
      - name: Cleanup and Installing Prerequisites
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E apt-get update
          sudo -E apt-get -y install lolcat build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git \
            libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget p7zip-full
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo apt-get -y install python3-pip
          pip3 install --upgrade gdown
          pip3 install git+https://github.com/Juvenal-Yescas/mediafire-dl
          wget https://mega.nz/linux/repo/xUbuntu_22.04/amd64/megacmd-xUbuntu_22.04_amd64.deb && sudo apt install "$PWD/megacmd-xUbuntu_22.04_amd64.deb"

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Download ROOTFS via link
        run: |
          mkdir -p ./rootfs
          if [[ -n "${{ inputs.rootfs_url }}" ]]; then
            if [[ "${{ inputs.rootfs_url }}" == *"drive.google.com"* ]]; then
              file_id=$(echo ${{ inputs.rootfs_url }} | awk -F'/' '{print $6}')
              gdown --id ${file_id} -O ./rootfs/rootfs.tar.gz

            elif [[ "${{ inputs.rootfs_url }}" == *"mediafire.com"* ]]; then
              mediafire-dl ${{ inputs.rootfs_url }} -o ./rootfs/rootfs.tar.gz

            elif [[ "${{ inputs.rootfs_url }}" == *"mega.nz"* ]]; then
              mega-get ${{ inputs.rootfs_url }}
              file_mega=$(ls rootfs | grep -E '\.tar\.gz$')
              mv "rootfs/${file_mega}" ./rootfs/rootfs.tar.gz

            elif [[ "${{ inputs.rootfs_url }}" == *"github.com"* && "${{ inputs.rootfs_url }}" == *"/releases/download/"* ]]; then
              wget --header="Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   --no-check-certificate \
                   -O ./rootfs/rootfs.tar.gz \
                   ${{ inputs.rootfs_url }}

            else
              wget --no-check-certificate ${{ inputs.rootfs_url }} -O ./rootfs/rootfs.tar.gz
            fi
          fi

      - name: Building OpenWrt
        run: |
          sudo ./ulo2 -k ${{ inputs.kernel }} -m ${{ inputs.devices }} -r ${{ inputs.rootfs }} -s ${{ inputs.rootfs_size }}

      - name: Creating Package Artifact
        run: |
          mkdir -p ./artifact
          cp -rf ./out/${{ inputs.devices }}/* ./artifact/
          
      - name: Delivering Package
        uses: actions/upload-artifact@v4
        with:
          name: openwrt_package
          path: ./artifact/*

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifact/*
          tag: ${{ inputs.devices }}
          file_glob: true
          overwrite: true
          body: |
            ##  OpenWRT Release for ${{ inputs.devices }} devices
            ULO-Builder Release from Github Workflow
            ### OpenWrt Image Information
            - Firmware Details : 
              - Devices type : ${{ inputs.devices }}
              - Kernel version : ${{ inputs.kernel }}
              - ROOTFS File : ${{ inputs.rootfs }}
              - ROOTFS Size : ${{ inputs.rootfs_size }}
            - Firmware Information : 
              - ${{ inputs.fwinfo }}
